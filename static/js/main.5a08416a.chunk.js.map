{"version":3,"sources":["Astro.js","App.js","reportWebVitals.js","index.js"],"names":["AstroBG","props","Sketch","p","MAG","windowWidth","stars","lines","setup","createCanvas","windowHeight","WEBGL","normalMaterial","i","push","random","draw","orbitControl","background","fill","stroke","forEach","pos","x","y","z","translate","sphere","length","x1","y1","z1","x2","y2","z2","line","windowResized","resizeCanvas","mouseClicked","ref","createRef","this","p5","current","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAGqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAIVC,OAAS,SAACC,GACN,IAAIC,EAAMD,EAAEE,YAAY,EAEpBC,EAAQ,GACRC,EAAQ,GAEZJ,EAAEK,MAAQ,WACRL,EAAEM,aAAaN,EAAEE,YAAaF,EAAEO,aAAcP,EAAEQ,OAChDR,EAAES,iBAGF,IAAI,IAAIC,EAAI,EAAGA,EATK,GASgBA,IAChCP,EAAMQ,KACJ,CAAEX,EAAEY,QAAQX,EAAKA,GAAMD,EAAEY,QAAQX,EAAKA,GAAMD,EAAEY,QAAQX,EAAKA,MAMnED,EAAEa,KAAO,WACLb,EAAEc,aAAa,GACfd,EAAEe,WAAW,GAQbf,EAAEgB,KAAK,KACPhB,EAAEiB,OAAO,KAETd,EAAMe,SAAQ,SAAAC,GAAQ,IAAD,cACDA,EADC,GACZC,EADY,KACTC,EADS,KACNC,EADM,KAEjBtB,EAAEuB,UAAUH,EAAGC,EAAGC,GAClBtB,EAAEwB,OAAO,GACTxB,EAAEuB,WAAWH,GAAIC,GAAIC,MAGzB,IAAI,IAAIZ,EAAI,EAAGA,EAAEN,EAAMqB,OAAQf,IAAK,CAAC,IAAD,cACON,EAAMM,GADb,GAC3BgB,EAD2B,KACvBC,EADuB,KACnBC,EADmB,KACfC,EADe,KACXC,EADW,KACPC,EADO,KACHd,EADG,KAEhCjB,EAAEiB,OAAOA,GACTjB,EAAEgC,KAAKN,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAC3B3B,EAAMM,GAAG,IAAM,IAIvBV,EAAEiC,cAAgB,WACdjC,EAAEkC,aAAalC,EAAEE,YAAaF,EAAEO,eAGpCP,EAAEmC,aAAe,WAAO,IAAD,EACAnC,EAAEY,OAAOT,GADT,mBACduB,EADc,KACVC,EADU,KACNC,EADM,OAEA5B,EAAEY,OAAOT,GAFT,mBAEd0B,EAFc,KAEVC,EAFU,KAENC,EAFM,KAGnB3B,EAAMO,KAAK,CAACe,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAI,MAzDxC,EAAKK,IAAMC,sBAFI,E,gEAgEfC,KAAKC,GAAK,IAAIA,IAAGD,KAAKvC,OAAQuC,KAAKF,IAAII,W,+BAIvC,OACI,qBAAKJ,IAAKE,KAAKF,U,GAtEUK,aCOtBC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5a08416a.chunk.js","sourcesContent":["import { Component, createRef } from \"react\";\r\nimport p5 from 'p5';\r\n\r\nexport default class AstroBG extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ref = createRef();\r\n    }\r\n\r\n    Sketch = (p) => {\r\n        let MAG = p.windowWidth/8;\r\n        let AMOUNT_OF_STARS = 25;\r\n        let stars = [];\r\n        let lines = [];\r\n\r\n        p.setup = () => {\r\n          p.createCanvas(p.windowWidth, p.windowHeight, p.WEBGL); \r\n          p.normalMaterial();\r\n          \r\n          // Generate Stars\r\n          for(let i = 0; i < AMOUNT_OF_STARS; i++) {\r\n              stars.push(\r\n                [ p.random(-MAG, MAG), p.random(-MAG, MAG), p.random(-MAG, MAG) ]\r\n              );\r\n            }\r\n            \r\n        };\r\n\r\n        p.draw = () => {\r\n            p.orbitControl(4);\r\n            p.background(0);\r\n            \r\n            // Red box\r\n            //p.fill(255, 0, 0);\r\n            //p.stroke(255);\r\n            //p.box(100, 100);\r\n            \r\n            // Smaller shapes\r\n            p.fill(255);\r\n            p.stroke(255);\r\n            \r\n            stars.forEach(pos => {\r\n                var [x, y, z] = pos\r\n                p.translate(x, y, z);\r\n                p.sphere(1);\r\n                p.translate(-x, -y, -z);\r\n            });\r\n\r\n            for(var i = 0; i<lines.length; i++) {\r\n                var [x1, y1, z1, x2, y2, z2, stroke] = lines[i];\r\n                p.stroke(stroke);\r\n                p.line(x1, y1, z1, x2, y2, z2);\r\n                lines[i][6] += 1\r\n            }\r\n        };\r\n\r\n        p.windowResized = () => {\r\n            p.resizeCanvas(p.windowWidth, p.windowHeight);\r\n        };\r\n        \r\n        p.mouseClicked = () => {\r\n            var [x1, y1, z1] = p.random(stars);\r\n            var [x2, y2, z2] = p.random(stars);\r\n            lines.push([x1, y1, z1, x2, y2, z2, 0]);\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.p5 = new p5(this.Sketch, this.ref.current);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.ref}>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import AstroBG from './Astro.js';\n\nfunction App() {\n  return (\n    <div>\n      <AstroBG />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}